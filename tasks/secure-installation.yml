---
- name: Set the user's .my.cnf file path.
  set_fact:
    mysql_user_cnf_path: "{{ mysql_user_home }}/.my.cnf"

- name: Write the user's .my.cnf file with password credentials.
  template:
    src: "user-my.cnf.j2"
    dest: "{{ mysql_user_cnf_path }}"
    owner: "{{ mysql_user_name }}"
    mode: 0600
  when: >
    mysql_user_name != mysql_root_username
    and (mysql_install_packages | bool or mysql_user_password_update)

- name: Fetch contents of the user's .my.cnf file
  slurp:
    src: "{{ mysql_user_cnf_path }}"
  register: mysql_user_cnf_file
  when: mysql_user_name != mysql_root_username

# It would be cleaner to use the `ini` lookup plugin, but that only works
# locally so we'd have to copy the file first, which we'd rather not do because
# it contains secrets.
- name: Extract the user password from .my.cnf
  set_fact:
    mysql_user_password_written: "{{ mysql_user_cnf_file['content'] | b64decode | regex_findall('password=\"(.+)\"') | first }}"
  when: mysql_user_name != mysql_root_username

- name: Ensure default user is present.
  mysql_user:
    name: "{{ mysql_user_name }}"
    host: 'localhost'
    password: "{{ mysql_user_password_written }}"
    priv: '*.*:ALL,GRANT'
    state: present
  when: mysql_user_name != mysql_root_username

- name: Disallow root login remotely
  command: 'mysql -NBe "{{ item }}"'
  with_items:
    - DELETE FROM mysql.user WHERE User='{{ mysql_root_username }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  changed_when: false

- name: Get list of hosts for the root user.
  command: mysql -NBe
    "SELECT Host
    FROM mysql.user
    WHERE User = '{{ mysql_root_username }}'
    ORDER BY (Host='localhost') ASC"
  register: mysql_root_hosts
  changed_when: false
  check_mode: false
  when: mysql_install_packages | bool or mysql_root_password_update

- name: Set root's .my.cnf file path.
  set_fact:
    mysql_root_cnf_path: "{{ mysql_root_home }}/.my.cnf"

- name: Write root's .my.cnf file with password credentials.
  template:
    src: "root-my.cnf.j2"
    dest: "{{ mysql_root_cnf_path }}"
    owner: root
    group: root
    mode: 0600
  when: mysql_install_packages | bool or mysql_root_password_update
  register: mysql_root_password_setting

- name: Fetch contents of root's .my.cnf file
  slurp:
    src: "{{ mysql_root_cnf_path }}"
  register: mysql_root_cnf_file

# It would be cleaner to use the `ini` lookup plugin, but that only works
# locally so we'd have to copy the file first, which we'd rather not do because
# it contains secrets.
- name: Extract the root password from .my.cnf
  set_fact:
    mysql_root_password_written: "{{ mysql_root_cnf_file['content'] | b64decode | regex_findall('password=\"(.+)\"') | first }}"

# Note: We do not use mysql_user for this operation, as it doesn't always update
# the root password correctly. See: https://goo.gl/MSOejW
# Set root password for MySQL >= 5.7.x.
- name: Update MySQL root password for localhost root account (5.7.x).
  shell: >
    mysql -u root -NBe
    'ALTER USER "{{ mysql_root_username }}"@"{{ item }}"
    IDENTIFIED WITH mysql_native_password BY "{{ mysql_root_password_written }}"; FLUSH PRIVILEGES;'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' in mysql_cli_version.stdout or '8.0.' in mysql_cli_version.stdout)
    and mysql_root_password_setting.changed

# Set root password for MySQL < 5.7.x.
- name: Update MySQL root password for localhost root account (< 5.7.x).
  shell: >
    mysql -NBe
    'SET PASSWORD FOR "{{ mysql_root_username }}"@"{{ item }}" = PASSWORD("{{ mysql_root_password_written }}"); FLUSH PRIVILEGES;'
  with_items: "{{ mysql_root_hosts.stdout_lines|default([]) }}"
  when: >
    ((mysql_install_packages | bool) or mysql_root_password_update)
    and ('5.7.' not in mysql_cli_version.stdout and '8.0.' not in mysql_cli_version.stdout)
    and mysql_root_password_setting.changed

- name: Get list of hosts for the anonymous user.
  command: mysql -NBe "SELECT Host FROM mysql.user WHERE User = ''"
  register: mysql_anonymous_hosts
  changed_when: false
  check_mode: false

- name: Remove anonymous MySQL users.
  mysql_user:
    name: ""
    host: "{{ item }}"
    state: absent
  with_items: "{{ mysql_anonymous_hosts.stdout_lines|default([]) }}"

- name: Remove MySQL test database.
  mysql_db: "name='test' state=absent"
