---
sudo: required

env:
  - distribution: centos
    version: 6
    init: /sbin/init
    run_opts: ""
    playbook: test.yml
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: centos-7-mariadb-test.yml
  - distribution: centos
    version: 7
    init: /usr/lib/systemd/systemd
    run_opts: "--privileged --volume=/sys/fs/cgroup:/sys/fs/cgroup:ro"
    playbook: centos-7-mysql-test.yml
  - distribution: ubuntu
    version: 14.04
    init: /sbin/init
    run_opts: ""
    playbook: test.yml
  # - distribution: ubuntu
  #   version: 12.04
  #   init: /sbin/init
  #   run_opts: ""
  #   playbook: test.yml

services:
  - docker

before_install:
  # Pull container
  - 'sudo docker pull ${distribution}:${version}'
  # Customize container
  - 'sudo docker build --rm=true --file=tests/Dockerfile.${distribution}-${version} --tag=${distribution}-${version}:ansible tests'

script:
  - container_id=$(mktemp)
    # Run container in detached state
  - 'sudo docker run --detach --volume="${PWD}":/etc/ansible/roles/role_under_test:ro ${run_opts} ${distribution}-${version}:ansible "${init}" > "${container_id}"'

  # Ansible syntax check.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook} --syntax-check'

  # Test role.
  - 'sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}'

  # Test role idempotence.
  - >
    sudo docker exec "$(cat ${container_id})" ansible-playbook /etc/ansible/roles/role_under_test/tests/${playbook}
    | grep -q 'changed=0.*failed=0'
    && (echo 'Idempotence test: pass' && exit 0)
    || (echo 'Idempotence test: fail' && exit 1)

  # Some MySQL debugging (show all the logs).
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm ls -lah /var/log
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql/error.log || true
  - sudo docker exec --tty "$(cat ${container_id})" env TERM=xterm cat /var/log/mysql.err || true

  # Check to make sure we can connect to MySQL via Unix socket.
  - >
    sudo docker exec "$(cat ${container_id})" mysql -u root -proot -e 'show databases;'
    | grep -q 'information_schema'
    && (echo 'MySQL running normally' && exit 0)
    || (echo 'MySQL not running' && exit 1)

  # Check to make sure we can connect to MySQL via TCP.
  - >
    sudo docker exec "$(cat ${container_id})" mysql -u root -proot -h 127.0.0.1 -e 'show databases;'
    | grep -q 'information_schema'
    && (echo 'MySQL running normally' && exit 0)
    || (echo 'MySQL not running' && exit 1)

  # Clean up
  - sudo docker stop "$(cat ${container_id})"

notifications:
  webhooks: https://galaxy.ansible.com/api/v1/notifications/
